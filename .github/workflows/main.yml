name: Project Docs

on: [push]

permissions:
  contents: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          sudo apt-get update -qq
          sudo apt-get install -y jq tree
          echo "Dependencies installed"

      - name: Verify working directory
        run: |
          pwd
          ls -la

      - name: Generate and Archive Docs
        run: |
          set -euo pipefail
          echo "Starting documentation generation"
          mkdir -p docs/generated/archive
          echo "Directory structure created"

          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "Timestamp: $TIMESTAMP"

          echo "Generating directory tree"
          if command -v tree &> /dev/null; then
            tree -I 'node_modules|.git|.cache' -a --noreport > docs/generated/00_tree.txt || echo "Tree command failed"
          fi
          if [ ! -s docs/generated/00_tree.txt ]; then
            find . -type d ! -path './node_modules*' ! -path './.git*' ! -path './.cache*' \
              | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/" > docs/generated/00_tree.txt
          fi
          echo "Directory tree saved"

          echo "Generating flat file list"
          find "$(pwd)" -type f ! -path "*/node_modules/*" ! -path "*/.git/*" ! -path "*/.cache/*" \
            | sed "s|$(pwd)/||" > docs/generated/01_flat_dir.txt
          echo "Flat file list saved"

          echo "Checking project dependencies"
          if [ -f package.json ]; then
            jq -r '.dependencies' package.json > docs/generated/dependencies.txt 2>/dev/null || \
              (echo "jq failed, using fallback" && grep '"dependencies"' package.json | awk -F: '{print $2}' > docs/generated/dependencies.txt)
          else
            echo "No package.json found" > docs/generated/dependencies.txt
          fi
          if [ -f package-lock.json ]; then
            echo "package-lock.json exists" >> docs/generated/dependencies.txt
          fi
          if [ -f yarn.lock ]; then
            echo "yarn.lock exists" >> docs/generated/dependencies.txt
          fi
          echo "Dependency info saved"

          echo "Archiving files"
          cp docs/generated/00_tree.txt docs/generated/archive/00_tree_${TIMESTAMP}.txt
          cp docs/generated/01_flat_dir.txt docs/generated/archive/01_flat_dir_${TIMESTAMP}.txt
          cp docs/generated/dependencies.txt docs/generated/archive/dependencies_${TIMESTAMP}.txt
          echo "Files archived"

          echo "Documentation generation complete"

      - name: Commit generated docs if changed
        run: |
          echo "Git status before commit"
          git status
          git add docs/generated/*
          echo "Changes to be committed:"
          git diff --cached --name-status
          if ! git diff --quiet --cached; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -m "chore: auto-update docs [skip ci]"
            echo "Commit created"
          else
            echo "No changes to commit"
          fi

      - name: Push changes
        if: always()
        run: |
          git pull --ff-only
          git push origin
          echo "Push complete"
